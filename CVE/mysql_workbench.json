{
  "app_name": "MySQL Workbench",
  "last_updated": "2025-05-11",
  "vulnerabilities": [
    {
      "cve_id": "CVE-2022-1292",
      "published_date": "2022-05-03",
      "last_modified_date": "2025-05-05",
      "base_score": 9.8,
      "severity": "CRITICAL",
      "description": "The c_rehash script does not properly sanitise shell metacharacters to prevent command injection. This script is distributed by some operating systems in a manner where it is automatically executed. On such operating systems, an attacker could execute arbitrary commands with the privileges of the script. Use of the c_rehash script is considered obsolete and should be replaced by the OpenSSL rehash command line tool. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2). Fixed in OpenSSL 1.1.1o (Affected 1.1.1-1.1.1n). Fixed in OpenSSL 1.0.2ze (Affected 1.0.2-1.0.2zd).",
      "cpe_name": "cpe:2.3:a:oracle:mysql_workbench:8.0.29:*:*:*:*:*:*:*"
    },
    {
      "cve_id": "CVE-2022-23308",
      "published_date": "2022-02-26",
      "last_modified_date": "2025-05-05",
      "base_score": 7.5,
      "severity": "HIGH",
      "description": "valid.c in libxml2 before 2.9.13 has a use-after-free of ID and IDREF attributes.",
      "cpe_name": "cpe:2.3:a:oracle:mysql_workbench:8.0.29:*:*:*:*:*:*:*"
    },
    {
      "cve_id": "CVE-2022-21824",
      "published_date": "2022-02-24",
      "last_modified_date": "2024-11-21",
      "base_score": 8.2,
      "severity": "HIGH",
      "description": "Due to the formatting logic of the \"console.table()\" function it was not safe to allow user controlled input to be passed to the \"properties\" parameter while simultaneously passing a plain object with at least one property as the first parameter, which could be \"__proto__\". The prototype pollution has very limited control, in that it only allows an empty string to be assigned to numerical keys of the object prototype.Node.js >= 12.22.9, >= 14.18.3, >= 16.13.2, and >= 17.3.1 use a null protoype for the object these properties are being assigned to.",
      "cpe_name": "cpe:2.3:a:oracle:mysql_workbench:8.0.27:*:*:*:*:*:*:*"
    },
    {
      "cve_id": "CVE-2021-44531",
      "published_date": "2022-02-24",
      "last_modified_date": "2024-11-21",
      "base_score": 7.4,
      "severity": "HIGH",
      "description": "Accepting arbitrary Subject Alternative Name (SAN) types, unless a PKI is specifically defined to use a particular SAN type, can result in bypassing name-constrained intermediates. Node.js < 12.22.9, < 14.18.3, < 16.13.2, and < 17.3.1 was accepting URI SAN types, which PKIs are often not defined to use. Additionally, when a protocol allows URI SANs, Node.js did not match the URI correctly.Versions of Node.js with the fix for this disable the URI SAN type when checking a certificate against a hostname. This behavior can be reverted through the --security-revert command-line option.",
      "cpe_name": "cpe:2.3:a:oracle:mysql_workbench:8.0.27:*:*:*:*:*:*:*"
    },
    {
      "cve_id": "CVE-2021-44532",
      "published_date": "2022-02-24",
      "last_modified_date": "2024-11-21",
      "base_score": 5.3,
      "severity": "MEDIUM",
      "description": "Node.js < 12.22.9, < 14.18.3, < 16.13.2, and < 17.3.1 converts SANs (Subject Alternative Names) to a string format. It uses this string to check peer certificates against hostnames when validating connections. The string format was subject to an injection vulnerability when name constraints were used within a certificate chain, allowing the bypass of these name constraints.Versions of Node.js with the fix for this escape SANs containing the problematic characters in order to prevent the injection. This behavior can be reverted through the --security-revert command-line option.",
      "cpe_name": "cpe:2.3:a:oracle:mysql_workbench:8.0.27:*:*:*:*:*:*:*"
    }
  ]
}