name: Check App CVEs

on:
  workflow_dispatch:
  schedule:
    - cron: "0 22 * * *" # Run at 10 PM UTC (12 AM CET) every day

jobs:
  check-cves:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests supabase

      - name: Read supported apps
        id: read-apps
        run: |
          # Read the supported_apps.json file
          echo "Reading supported apps from supported_apps.json"

      - name: Check CVEs for apps
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          cat > check_cves.py << 'EOF'
          import os
          import sys
          import requests
          import json
          import time
          from datetime import datetime, timedelta
          from urllib.parse import quote
          from supabase import create_client, Client

          # Get NVD API key from environment - required
          nvd_api_key = os.environ.get('NVD_API_KEY')

          # Check if API key is available
          if not nvd_api_key:
              print("ERROR: NVD_API_KEY is required but not found in environment variables.")
              print("Please add your NVD API key as a repository secret named NVD_API_KEY.")
              print("Get an API key at: https://nvd.nist.gov/developers/request-an-api-key")
              sys.exit(1)
              
          # Initialize Supabase client
          supabase_url = os.environ.get('SUPABASE_URL')
          supabase_key = os.environ.get('SUPABASE_KEY')

          if not supabase_url or not supabase_key:
              print("ERROR: Supabase credentials are required but not found in environment variables.")
              print("Please add your Supabase URL and service role key as repository secrets.")
              sys.exit(1)
              
          supabase: Client = create_client(supabase_url, supabase_key)
              
          # With API key, rate limits are 50 requests per 30 seconds

          import json

          # Function to get proper app name from app JSON file
          def get_app_display_name(app_key, app_url):
              try:
                  response = requests.get(app_url)
                  if response.status_code == 200:
                      app_data = response.json()
                      # Get the display name from the JSON file
                      display_name = app_data.get('name') or app_data.get('display_name')
                      if display_name:
                          return display_name
                  # If we can't get the display name, format the key as a fallback
                  return ' '.join(word.capitalize() for word in app_key.split('_'))
              except Exception as e:
                  print(f"Error fetching app info for {app_key}: {str(e)}")
                  # Format the key as a fallback
                  return ' '.join(word.capitalize() for word in app_key.split('_'))

          # Read the supported apps from the JSON file
          try:
              with open('supported_apps.json', 'r') as f:
                  supported_apps = json.load(f)
              
              print(f"Found {len(supported_apps)} apps in supported_apps.json")
              
              # Process all apps
              app_display_names = []
              
              for app_key, app_url in supported_apps.items():
                  display_name = get_app_display_name(app_key, app_url)
                  app_display_names.append(display_name)
                  
                  # Add a small delay to avoid rate limiting when fetching app info
                  time.sleep(0.1)
              
              print(f"Processing {len(app_display_names)} apps for CVE checks")
              
          except Exception as e:
              print(f"Error reading supported_apps.json: {str(e)}")
              sys.exit(1)

          # List of apps to check
          apps_to_check = app_display_names

          # Function to check CVEs for a specific app
          def check_cves_for_app(app_name):
              print(f"\n{'=' * 50}")
              print(f"Checking CVEs for {app_name}")
              print(f"{'=' * 50}")
              
              # Normalize app name for search
              search_term = app_name.lower().strip()
              
              # Get CVEs from the last 90 days
              end_date = datetime.now()
              start_date = end_date - timedelta(days=90)
              
              # Format dates for NVD API (ISO format)
              start_date_str = start_date.strftime("%Y-%m-%dT00:00:00.000")
              end_date_str = end_date.strftime("%Y-%m-%dT23:59:59.999")
              
              try:
                  # Directly query the NVD API
                  url = f"https://services.nvd.nist.gov/rest/json/cves/2.0"
                  params = {
                      "keywordSearch": search_term,
                      "pubStartDate": start_date_str,
                      "pubEndDate": end_date_str,
                      "resultsPerPage": 25
                  }
                  
                  # Set up headers with API key
                  headers = {'apiKey': nvd_api_key}
                  
                  # Make the request with API key in headers
                  response = requests.get(url, params=params, headers=headers)
                  
                  # Check if request was successful
                  if response.status_code != 200:
                      print(f"Error: API request failed with status code {response.status_code}")
                      print(f"Response: {response.text}")
                      return
                  
                  # Parse the JSON response
                  data = response.json()
                  
                  # Get the total count and vulnerabilities
                  total_results = data.get('totalResults', 0)
                  vulnerabilities = data.get('vulnerabilities', [])
                  
                  if total_results == 0 or not vulnerabilities:
                      print(f"No CVEs found for {app_name} in the last 90 days.")
                      return
                  
                  print(f"Found {total_results} potential CVEs for {app_name} in the last 90 days.")
                  print(f"Displaying the 5 most recent CVEs sorted by last modified date:")
                  print(f"\n{'ID':<20} {'Published':<12} {'Last Modified':<12} {'Base Score':<10} {'Severity':<10}")
                  print(f"{'-' * 72}")
                  
                  # Process and sort vulnerabilities by last modified date
                  processed_vulns = []
                  for vuln in vulnerabilities:
                      cve = vuln.get('cve', {})
                      
                      # Get CVE details
                      cve_id = cve.get('id', 'N/A')
                      
                      # Get description (English)
                      description = "N/A"
                      if 'descriptions' in cve:
                          for desc in cve['descriptions']:
                              if desc.get('lang') == 'en':
                                  description = desc.get('value', 'N/A')
                                  break
                      
                      # Get published and last modified dates
                      published_date = "N/A"
                      last_modified_date = "N/A"
                      last_modified_datetime = None
                      if 'published' in cve:
                          published_date = cve['published'].split('T')[0]
                      if 'lastModified' in cve:
                          last_modified_date = cve['lastModified'].split('T')[0]
                          last_modified_datetime = datetime.strptime(cve['lastModified'].split('.')[0], "%Y-%m-%dT%H:%M:%S")
                      
                      # Get CVSS score and severity if available
                      base_score = "N/A"
                      severity = "N/A"
                      
                      metrics = cve.get('metrics', {})
                      
                      # Try CVSS 3.1 first
                      if 'cvssMetricV31' in metrics and metrics['cvssMetricV31']:
                          cvss_data = metrics['cvssMetricV31'][0].get('cvssData', {})
                          base_score = cvss_data.get('baseScore', 'N/A')
                          severity = cvss_data.get('baseSeverity', 'N/A')
                      # Then try CVSS 3.0
                      elif 'cvssMetricV30' in metrics and metrics['cvssMetricV30']:
                          cvss_data = metrics['cvssMetricV30'][0].get('cvssData', {})
                          base_score = cvss_data.get('baseScore', 'N/A')
                          severity = cvss_data.get('baseSeverity', 'N/A')
                      # Finally try CVSS 2.0
                      elif 'cvssMetricV2' in metrics and metrics['cvssMetricV2']:
                          cvss_data = metrics['cvssMetricV2'][0].get('cvssData', {})
                          base_score = cvss_data.get('baseScore', 'N/A')
                          severity = metrics['cvssMetricV2'][0].get('baseSeverity', 'N/A')
                      
                      # Add to processed list with all details
                      processed_vulns.append({
                          'cve_id': cve_id,
                          'published_date': published_date,
                          'last_modified_date': last_modified_date,
                          'last_modified_datetime': last_modified_datetime,
                          'base_score': base_score,
                          'severity': severity,
                          'description': description
                      })
                  
                  # Sort by last modified date (newest first)
                  sorted_vulns = sorted(
                      [v for v in processed_vulns if v['last_modified_datetime'] is not None],
                      key=lambda x: x['last_modified_datetime'],
                      reverse=True
                  )
                  
                  # Take only the 5 most recent CVEs
                  recent_vulns = sorted_vulns[:5]
                  
                  # First, delete existing CVEs for this app to avoid duplicates
                  try:
                      print(f"Removing existing CVE records for {app_name}...")
                      supabase.table('app_cves').delete().eq('app_name', app_name).execute()
                  except Exception as e:
                      print(f"Error deleting existing CVEs for {app_name}: {str(e)}")
                  
                  # Store the CVEs in the database
                  if recent_vulns:
                      print(f"Storing {len(recent_vulns)} CVEs for {app_name} in the database...")
                      cve_records = []
                      for vuln in recent_vulns:
                          # Convert base_score to float if it's not N/A
                          base_score_value = None
                          if vuln['base_score'] != 'N/A':
                              try:
                                  base_score_value = float(vuln['base_score'])
                              except:
                                  pass
                              
                          cve_record = {
                              'app_name': app_name,
                              'cve_id': vuln['cve_id'],
                              'published_date': vuln['published_date'] if vuln['published_date'] != 'N/A' else None,
                              'last_modified_date': vuln['last_modified_date'] if vuln['last_modified_date'] != 'N/A' else None,
                              'base_score': base_score_value,
                              'severity': vuln['severity'] if vuln['severity'] != 'N/A' else None,
                              'description': vuln['description'] if vuln['description'] != 'N/A' else None
                          }
                          cve_records.append(cve_record)
                      
                      try:
                          result = supabase.table('app_cves').insert(cve_records).execute()
                          print(f"✅ Successfully stored CVEs for {app_name} in the database")
                      except Exception as e:
                          print(f"Error storing CVEs for {app_name}: {str(e)}")
                  
                  # Display the results
                  for vuln in recent_vulns:
                      print(f"{vuln['cve_id']:<20} {vuln['published_date']:<12} {vuln['last_modified_date']:<12} {vuln['base_score']:<10} {vuln['severity']:<10}")
                      print(f"Description: {vuln['description']}")
                      print(f"{'-' * 72}")
                  
                  # Show how many were found vs. how many are displayed
                  if total_results > 5:
                      print(f"Note: Showing 5 most recent CVEs out of {total_results} found for {app_name}.")
                  
                  encoded_search = quote(search_term)
                  print(f"\nFor more details, visit: https://nvd.nist.gov/vuln/search/results?form_type=Basic&results_type=overview&query={encoded_search}&search_type=all")
                  
              except Exception as e:
                  print(f"Error checking CVEs for {app_name}: {str(e)}")
                  import traceback
                  traceback.print_exc()

          # Check CVEs for each app
          print(f"\nChecking CVEs for {len(apps_to_check)} apps:")
          for i, app in enumerate(apps_to_check):
              print(f"\nProcessing app {i+1}/{len(apps_to_check)}: {app}")
              check_cves_for_app(app.strip())
              # Add a small delay between requests to avoid rate limiting
              # With API key, we can make up to 50 requests per 30 seconds
              time.sleep(0.5)  # 0.5 second delay with API key

          print("\nCVE check completed and data stored in Supabase database.")
          EOF

          python check_cves.py
