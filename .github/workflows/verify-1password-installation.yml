name: Verify 1Password Installation

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0" # Run weekly at midnight on Sunday

jobs:
  verify-installation:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Read app JSON file
        id: read-app-json
        run: |
          # Read the app JSON file
          APP_JSON=$(cat Apps/1password.json)

          # Extract values from JSON
          APP_NAME=$(echo "$APP_JSON" | jq -r '.name')
          APP_URL=$(echo "$APP_JSON" | jq -r '.url')
          APP_VERSION=$(echo "$APP_JSON" | jq -r '.version')
          APP_BUNDLE_ID=$(echo "$APP_JSON" | jq -r '.bundleId')
          APP_SHA=$(echo "$APP_JSON" | jq -r '.sha')

          # Set outputs for use in later steps
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV
          echo "APP_URL=$APP_URL" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_BUNDLE_ID=$APP_BUNDLE_ID" >> $GITHUB_ENV
          echo "APP_SHA=$APP_SHA" >> $GITHUB_ENV

          # Print app details
          echo "üì¶ App Details:"
          echo "Name: $APP_NAME"
          echo "Version: $APP_VERSION"
          echo "Bundle ID: $APP_BUNDLE_ID"
          echo "Download URL: $APP_URL"
          echo "SHA256: $APP_SHA"

      - name: Download app package
        run: |
          echo "üì• Downloading $APP_NAME from $APP_URL..."
          curl -L -o app_package.pkg "$APP_URL"

          # Verify SHA256 checksum if provided
          if [ -n "$APP_SHA" ]; then
            echo "üîê Verifying SHA256 checksum..."
            DOWNLOADED_SHA=$(shasum -a 256 app_package.pkg | awk '{print $1}')
            echo "Expected: $APP_SHA"
            echo "Actual: $DOWNLOADED_SHA"
            
            if [ "$DOWNLOADED_SHA" = "$APP_SHA" ]; then
              echo "‚úÖ SHA256 checksum verified successfully"
            else
              echo "‚ùå SHA256 checksum verification failed"
              exit 1
            fi
          fi

      - name: Install app package
        run: |
          echo "üì¶ Installing $APP_NAME..."
          sudo installer -pkg app_package.pkg -target /

          # Check if installation was successful
          if [ $? -eq 0 ]; then
            echo "‚úÖ Installation successful"
          else
            echo "‚ùå Installation failed"
            exit 1
          fi

      - name: Verify app installation
        run: |
          echo "üîç Verifying app installation..."

          # Check if the app exists in Applications folder
          APP_PATH="/Applications/$APP_NAME.app"
          if [ -d "$APP_PATH" ]; then
            echo "‚úÖ App found at $APP_PATH"
          else
            echo "üîç App not found at expected location, searching in Applications folder..."
            FOUND_APP=$(find /Applications -maxdepth 1 -name "*.app" | grep -i "$APP_NAME" || echo "")
            
            if [ -n "$FOUND_APP" ]; then
              echo "‚úÖ App found at $FOUND_APP"
              APP_PATH="$FOUND_APP"
            else
              echo "‚ùå App not found in Applications folder"
              ls -la /Applications
              exit 1
            fi
          fi

      - name: Check app details
        run: |
          echo "üîç Checking app details..."

          # Find the app path
          APP_PATH=$(find /Applications -maxdepth 1 -name "*.app" | grep -i "$APP_NAME" || echo "")

          if [ -z "$APP_PATH" ]; then
            echo "‚ùå Could not find app in Applications folder"
            exit 1
          fi

          echo "üìÇ App path: $APP_PATH"

          # Get app bundle ID
          ACTUAL_BUNDLE_ID=$(mdls -name kMDItemCFBundleIdentifier -raw "$APP_PATH" 2>/dev/null || echo "Not found")
          echo "üÜî Bundle ID: $ACTUAL_BUNDLE_ID (Expected: $APP_BUNDLE_ID)"

          BUNDLE_ID_UPDATED=false
          if [ "$ACTUAL_BUNDLE_ID" = "$APP_BUNDLE_ID" ]; then
            echo "‚úÖ Bundle ID matches expected value"
          else
            echo "‚ö†Ô∏è Bundle ID does not match expected value"
            
            # Only update if we have a valid bundle ID
            if [ "$ACTUAL_BUNDLE_ID" != "Not found" ] && [ "$ACTUAL_BUNDLE_ID" != "(null)" ]; then
              echo "üîÑ Updating bundle ID in JSON file..."
              
              # Get the app JSON file path
              APP_JSON_PATH="Apps/1password.json"
              
              # Update the bundleId in the JSON file using jq
              if [ -f "$APP_JSON_PATH" ]; then
                # Create a backup of the original file
                cp "$APP_JSON_PATH" "${APP_JSON_PATH}.bak"
                
                # Update the bundleId in the JSON file
                jq --arg new_bundle_id "$ACTUAL_BUNDLE_ID" '.bundleId = $new_bundle_id' "$APP_JSON_PATH" > "${APP_JSON_PATH}.tmp"
                mv "${APP_JSON_PATH}.tmp" "$APP_JSON_PATH"
                
                echo "‚úÖ Updated bundleId in $APP_JSON_PATH from '$APP_BUNDLE_ID' to '$ACTUAL_BUNDLE_ID'"
                BUNDLE_ID_UPDATED=true
              else
                echo "‚ùå Could not find JSON file at $APP_JSON_PATH"
              fi
            else
              echo "‚ö†Ô∏è Actual bundle ID is not valid, skipping update"
            fi
          fi

          # Get app version
          ACTUAL_VERSION=$(mdls -name kMDItemVersion -raw "$APP_PATH" 2>/dev/null || echo "Not found")

          # If version not found with mdls, try using CFBundleShortVersionString from Info.plist
          if [ "$ACTUAL_VERSION" = "(null)" ] || [ "$ACTUAL_VERSION" = "Not found" ]; then
            ACTUAL_VERSION=$(/usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$APP_PATH/Contents/Info.plist" 2>/dev/null || echo "Not found")
          fi

          echo "üìä Version: $ACTUAL_VERSION (Expected: $APP_VERSION)"

          if [ "$ACTUAL_VERSION" = "$APP_VERSION" ]; then
            echo "‚úÖ Version matches expected value"
          else
            echo "‚ö†Ô∏è Version does not match expected value"
          fi

          # Get additional app details
          echo "üìã Additional app details:"
          echo "-----------------------------------"

          # App signing info
          echo "üîê Signing information:"
          codesign -dvv "$APP_PATH" 2>&1 || echo "Could not get signing information"

          # App permissions
          echo "üîí App permissions:"
          ls -la "$APP_PATH"

          # App size
          APP_SIZE=$(du -sh "$APP_PATH" | awk '{print $1}')
          echo "üìè App size: $APP_SIZE"

          # List app contents
          echo "üìë App contents:"
          ls -la "$APP_PATH/Contents"

          # Check if app can be launched (without actually launching it)
          echo "üöÄ Checking if app can be launched..."
          if [ -x "$APP_PATH/Contents/MacOS/"* ]; then
            echo "‚úÖ App executable found and has execute permissions"
            MAIN_EXECUTABLE=$(ls -1 "$APP_PATH/Contents/MacOS/" | head -1)
            echo "üìÑ Main executable: $MAIN_EXECUTABLE"
          else
            echo "‚ùå App executable not found or does not have execute permissions"
            ls -la "$APP_PATH/Contents/MacOS/"
          fi

          echo "-----------------------------------"
          echo "‚úÖ App verification completed"

          # Output summary of changes
          if [ "$BUNDLE_ID_UPDATED" = "true" ]; then
            echo "üìù Summary of changes:"
            echo "- Updated bundleId in $APP_JSON_PATH from '$APP_BUNDLE_ID' to '$ACTUAL_BUNDLE_ID'"
          fi

      - name: Commit and push changes
        if: env.BUNDLE_ID_UPDATED == 'true'
        run: |
          echo "üìù Committing bundleId changes to repository..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "Apps/1password.json"
          git commit -m "Update bundleId for $APP_NAME to match actual value"
          git push https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git
