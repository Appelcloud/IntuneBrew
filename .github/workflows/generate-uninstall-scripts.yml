name: Generate Uninstall Scripts

on:
  # Run after the update-version-database workflow completes
  workflow_run:
    workflows: ["Update Version Database and Send Notifications"]
    types:
      - completed
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: "Force regenerate all scripts"
        required: false
        default: false
        type: boolean
      specific_apps:
        description: "Comma-separated list of specific apps to process (e.g., 1password,visual-studio-code)"
        required: false
        type: string

jobs:
  generate-scripts:
    runs-on: macos-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Generate uninstall scripts
        run: |
          echo "Generating uninstall scripts..."
          if [ -n "${{ github.event.inputs.specific_apps }}" ]; then
            # Convert comma-separated list to space-separated list of app files
            IFS=',' read -ra APP_ARRAY <<< "${{ github.event.inputs.specific_apps }}"
            APP_FILES=""
            for app in "${APP_ARRAY[@]}"; do
              APP_FILES="$APP_FILES Apps/${app}.json"
            done
            echo "Processing specific apps: $APP_FILES"
            python .github/scripts/generate_uninstall_scripts.py --output "Uninstall Scripts" --apps-dir "Apps" --apps $APP_FILES
          else
            echo "Processing all apps"
            python .github/scripts/generate_uninstall_scripts.py --output "Uninstall Scripts" --apps-dir "Apps"
          fi

      - name: Count generated scripts
        id: count-scripts
        run: |
          script_count=$(find "Uninstall Scripts" -name "uninstall_*.sh" | wc -l)
          echo "Generated $script_count uninstall scripts"
          echo "SCRIPT_COUNT=$script_count" >> $GITHUB_ENV

      - name: Make scripts executable
        run: |
          chmod +x "Uninstall Scripts"/*.sh

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "Uninstall Scripts"/*.sh

          if [ -n "${{ github.event.inputs.specific_apps }}" ]; then
            if [ "${{ github.event.inputs.force_regenerate }}" == "true" ]; then
              git commit -m "Force regenerated uninstall scripts for ${{ github.event.inputs.specific_apps }}" || echo "No changes to commit"
            else
              git commit -m "Generated uninstall scripts for ${{ github.event.inputs.specific_apps }}" || echo "No changes to commit"
            fi
          else
            if [ "${{ github.event.inputs.force_regenerate }}" == "true" ]; then
              git commit -m "Force regenerated $SCRIPT_COUNT uninstall scripts" || echo "No changes to commit"
            else
              git commit -m "Generated $SCRIPT_COUNT uninstall scripts" || echo "No changes to commit"
            fi
          fi

          git push https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git
