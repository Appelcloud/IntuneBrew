name: Virtual Assistant for Issues
run-name: Virtual Assistant helping with Issues

on:
  issues:
    types: [opened]

jobs:
  process-issue:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: |
          npm install openai
          npm install @octokit/rest

      - name: Create prompt file
        run: |
          cat > issue-prompt.md << 'EOL'
          You are a Virtual Assistant for the 'IntuneBrew-Website' project, a web application focused on managing Intune app deployments.
          Analyze the following GitHub issue meticulously. Provide a comprehensive analysis in JSON format.

          **Analysis Requirements:**

          1. **Categorization:** Determine the primary type (`bug`, `feature request`, or `feedback`). Note that questions, documentation issues, and enhancements should all be categorized as `feedback`.
          2. **Summary:** Write a clear, concise summary (2-3 sentences) capturing the core problem or request.
          3. **Detailed Analysis:** Provide a more in-depth analysis (3-5 sentences) with technical insights.
          4. **Labels:** Suggest *exactly one* primary type label from ONLY these three options: `bug`, `feature`, or `feedback`.
             The workflow will only apply ONE of these three labels, so choose the most appropriate one.
             - Use `bug` for defects, errors, or unexpected behavior
             - Use `feature` for new functionality or enhancements
             - Use `feedback` for questions, documentation issues, or general feedback
          5. **Priority:** Assign priority (`low`, `medium`, `high`, `critical`) based on impact and urgency.
          6. **Complexity & Effort:** Estimate complexity (`simple`, `moderate`, `complex`) and effort (`quick-fix`, `hours`, `days`, `weeks`).
          7. **Information Needed:** Indicate if more information is required from the user (`true`/`false`) and specify exactly what information is missing.
          8. **Affected Components:** List specific project components potentially affected (e.g., `AppGrid`, `TenantConnectionForm`, `API:/api/intune/apps/macos`).
          9. **Potential Solutions:**
             * If it's a **bug**, suggest potential areas in the code to investigate or troubleshooting steps.
             * If it's a **feature request**, provide brief implementation hints or considerations.
             * If it's a **question**, provide a direct answer if possible.
          10. **Related Documentation:** Suggest links to relevant documentation if applicable.
          11. **Duplicate Check:** Indicate if this issue might be a duplicate (`true`/`false`) and provide keywords for searching existing issues.
          12. **Next Steps:** Recommend concrete next actions for both the issue reporter and maintainers.

          **JSON Output Structure:**
          {
            "issueType": "bug|feature request|feedback",
            "summary": "Concise summary (2-3 sentences)",
            "detailedAnalysis": "In-depth analysis with technical insights (3-5 sentences)",
            "suggestedLabels": {
              "primary": "bug|feature|feedback"
            },
            "priority": "low|medium|high|critical",
            "complexity": "simple|moderate|complex",
            "estimatedEffort": "quick-fix|hours|days|weeks",
            "needsMoreInfo": true|false,
            "missingInformation": "Specific details about what information is missing (if needsMoreInfo is true)",
            "affectedComponents": ["component1", "component2"],
            "potentialSolution": "Detailed technical suggestion or answer",
            "relatedDocumentation": "Links or references to relevant documentation",
            "potentialDuplicateWarning": true|false,
            "duplicateSearchKeywords": ["keyword1", "keyword2"],
            "nextSteps": {
              "forReporter": ["Step 1", "Step 2"],
              "forMaintainers": ["Step 1", "Step 2"]
            },
            "autoResponse": "Direct answer if this is a simple question"
          }

          Issue content:
          EOL

          echo "Title: ${{ github.event.issue.title }}" >> issue-prompt.md
          echo "" >> issue-prompt.md
          echo "Body: ${{ github.event.issue.body }}" >> issue-prompt.md

      - name: Process issue with OpenAI API
        id: openai-analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_KEY }}
        run: |
          cat > analyze-issue.js << 'EOL'
          const fs = require('fs');
          const { OpenAI } = require('openai');

          const openai = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY
          });

          async function analyzeIssue() {
            const prompt = fs.readFileSync('issue-prompt.md', 'utf8');
            
            try {
              const response = await openai.chat.completions.create({
                model: "gpt-4o",
                messages: [
                  {
                    role: "system",
                    content: "You are a Virtual Assistant for the IntuneBrew-Website project. You provide comprehensive, technically precise analysis with actionable insights. Your responses are thorough, well-structured, and tailored to the specific context of this repository. You understand web applications, Microsoft Intune, app deployment, and tenant management concepts.\n\nIf the user has provided additional information in response to a previous request, carefully incorporate this new information into your analysis. Pay special attention to any sections marked with '--- Additional information provided by user ---' as these contain important details that were previously missing. When you see this additional information, you should set 'needsMoreInfo' to false in your response."
                  },
                  { role: "user", content: prompt }
                ],
                temperature: 0.1,
                max_tokens: 1500,
                response_format: { type: "json_object" }
              });
              
              // Extract the response content (API key not included in response)
              const content = response.choices[0].message.content;
              // Log only a snippet of the response to avoid exposing any sensitive data
              console.log(`Received response from OpenAI (${content.length} characters)`);
              
              // Write the response to a file (contains no sensitive data)
              fs.writeFileSync('openai-response.txt', content);
              
              // With response_format: { type: "json_object" }, the content should already be valid JSON
              try {
                // Parse to validate and then stringify to ensure proper format
                const jsonContent = JSON.parse(content);
                fs.writeFileSync('openai-response.txt', JSON.stringify(jsonContent, null, 2));
              } catch (jsonError) {
                console.error('Error parsing JSON response:', jsonError);
                
                // Fallback: try to extract JSON from the response if parsing fails
                try {
                  const jsonMatch = content.match(/{[\s\S]*}/);
                  if (jsonMatch) {
                    const extractedJson = jsonMatch[0];
                    fs.writeFileSync('openai-response.txt', extractedJson);
                  } else {
                    fs.writeFileSync('openai-response.txt', '{}');
                  }
                } catch (extractError) {
                  console.error('Error extracting JSON:', extractError);
                  fs.writeFileSync('openai-response.txt', '{}');
                }
              }
            } catch (error) {
              console.error('Error calling OpenAI API:', error);
              fs.writeFileSync('openai-response.txt', '{}');
            }
          }

          analyzeIssue();
          EOL

          node analyze-issue.js
          cat openai-response.txt

      - name: Extract JSON from OpenAI response
        id: extract-json
        run: |
          # Check if the file exists and has content
          if [ ! -s openai-response.txt ]; then
            echo "Warning: OpenAI response is empty or file doesn't exist"
            echo "JSON_CONTENT={}" >> $GITHUB_ENV
            echo "ISSUE_TYPE=" >> $GITHUB_ENV
            echo "NEEDS_MORE_INFO=false" >> $GITHUB_ENV
            echo "PRIORITY=" >> $GITHUB_ENV
            echo "LABELS=" >> $GITHUB_ENV
            echo "" > auto-response.txt
            exit 0
          fi

          JSON_CONTENT=$(cat openai-response.txt)

          echo "$JSON_CONTENT" | jq . > /dev/null 2>&1
          if [ $? -ne 0 ]; then
            echo "Warning: Invalid JSON in response, attempting to extract"
            # Try to extract JSON object
            JSON_CONTENT=$(grep -o '{.*}' openai-response.txt 2>/dev/null || echo '{}')
          fi

          echo "$JSON_CONTENT" > json-content.txt

          echo "HAS_JSON_CONTENT=true" >> $GITHUB_ENV

          ISSUE_TYPE=$(echo "$JSON_CONTENT" | jq -r '.issueType // ""' 2>/dev/null || echo "")
          NEEDS_MORE_INFO=$(echo "$JSON_CONTENT" | jq -r '.needsMoreInfo // false' 2>/dev/null || echo "false")
          MISSING_INFO=$(echo "$JSON_CONTENT" | jq -r '.missingInformation // ""' 2>/dev/null || echo "")
          PRIORITY=$(echo "$JSON_CONTENT" | jq -r '.priority // ""' 2>/dev/null || echo "")
          AUTO_RESPONSE=$(echo "$JSON_CONTENT" | jq -r '.autoResponse // ""' 2>/dev/null || echo "")
          SUMMARY=$(echo "$JSON_CONTENT" | jq -r '.summary // "No summary provided."' 2>/dev/null || echo "No summary provided.")
          DETAILED_ANALYSIS=$(echo "$JSON_CONTENT" | jq -r '.detailedAnalysis // ""' 2>/dev/null || echo "")
          POTENTIAL_SOLUTION=$(echo "$JSON_CONTENT" | jq -r '.potentialSolution // ""' 2>/dev/null || echo "")
          RELATED_DOCS=$(echo "$JSON_CONTENT" | jq -r '.relatedDocumentation // ""' 2>/dev/null || echo "")

          NEXT_STEPS_REPORTER=$(echo "$JSON_CONTENT" | jq -r '.nextSteps.forReporter // [] | tostring' 2>/dev/null || echo "[]")
          NEXT_STEPS_MAINTAINERS=$(echo "$JSON_CONTENT" | jq -r '.nextSteps.forMaintainers // [] | tostring' 2>/dev/null || echo "[]")

          echo "ISSUE_TYPE=$ISSUE_TYPE" >> $GITHUB_ENV
          echo "NEEDS_MORE_INFO=$NEEDS_MORE_INFO" >> $GITHUB_ENV
          echo "MISSING_INFO=$MISSING_INFO" >> $GITHUB_ENV
          echo "PRIORITY=$PRIORITY" >> $GITHUB_ENV
          echo "SUMMARY=$SUMMARY" >> $GITHUB_ENV
          echo "DETAILED_ANALYSIS=$DETAILED_ANALYSIS" >> $GITHUB_ENV
          echo "POTENTIAL_SOLUTION=$POTENTIAL_SOLUTION" >> $GITHUB_ENV
          echo "RELATED_DOCS=$RELATED_DOCS" >> $GITHUB_ENV
          echo "NEXT_STEPS_REPORTER=$NEXT_STEPS_REPORTER" >> $GITHUB_ENV
          echo "NEXT_STEPS_MAINTAINERS=$NEXT_STEPS_MAINTAINERS" >> $GITHUB_ENV

          PRIMARY_LABEL=$(echo "$JSON_CONTENT" | jq -r '.suggestedLabels.primary // ""' 2>/dev/null || echo "")

          if [ -z "$PRIMARY_LABEL" ]; then
            PRIMARY_LABEL=$(echo "$JSON_CONTENT" | jq -r '.suggestedLabels[0] // ""' 2>/dev/null || echo "")
          fi

          echo "PRIMARY_LABEL=$PRIMARY_LABEL" >> $GITHUB_ENV

          echo "$AUTO_RESPONSE" > auto-response.txt

      # Apply labels based on the analysis
      - name: Apply labels with colors
        if: env.PRIMARY_LABEL != ''
        uses: actions/github-script@v6
        with:
          script: |
            // Only apply one of the three allowed labels: bug, feature request, or feedback
            const primaryLabel = process.env.PRIMARY_LABEL;

            // Map the primary label to one of the allowed labels with vibrant colors
            let labels = [];

            // Type labels with enhanced colors
            if (primaryLabel === 'bug') {
              labels.push({
                name: 'bug',
                color: 'ff0000', // Bright red for bugs
                description: 'Something isn\'t working as expected'
              });
            } else if (primaryLabel === 'feature' || primaryLabel.includes('feature')) {
              labels.push({
                name: 'feature request',
                color: '0066ff', // Bright blue for feature requests
                description: 'New feature or enhancement request'
              });
            } else if (primaryLabel === 'feedback' || primaryLabel === 'question' ||
                      primaryLabel === 'docs' || primaryLabel === 'enhancement') {
              labels.push({
                name: 'feedback',
                color: '00cc66', // Bright green for feedback
                description: 'General feedback, questions, or documentation issues'
              });
            }

            // Add priority label based on priority
            const priority = process.env.PRIORITY || '';
            if (priority) {
              let priorityLabel = {
                name: `priority: ${priority}`,
                description: `Issue with ${priority} priority`
              };
              
              // Set color based on priority
              switch(priority.toLowerCase()) {
                case 'critical':
                  priorityLabel.color = 'ff00ff'; // Magenta for critical
                  break;
                case 'high':
                  priorityLabel.color = 'ff9900'; // Orange for high
                  break;
                case 'medium':
                  priorityLabel.color = 'ffcc00'; // Yellow for medium
                  break;
                case 'low':
                  priorityLabel.color = '99cc00'; // Light green for low
                  break;
                default:
                  priorityLabel.color = 'cccccc'; // Gray for unknown
              }
              
              labels.push(priorityLabel);
            }

            // Add potential duplicate label if needed
            // Read the JSON content from file
            const fs = require('fs');
            let jsonContent = {};
            try {
              const fileContent = fs.readFileSync('json-content.txt', 'utf8');
              jsonContent = JSON.parse(fileContent);
            } catch (error) {
              console.error('Error reading or parsing JSON file:', error);
              // Continue with empty object if there's an error
            }

            const potentialDuplicate = jsonContent.potentialDuplicateWarning === true;
            if (potentialDuplicate) {
              labels.push({
                name: 'potential-duplicate',
                color: '9933ff', // Purple for potential duplicates
                description: 'This issue might be a duplicate of an existing issue'
              });
            }

            // Apply all labels
            if (labels.length > 0) {
              try {
                // Create or update each label
                for (const label of labels) {
                  try {
                    // Try to get the label first
                    try {
                      await github.rest.issues.getLabel({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        name: label.name
                      });
                      
                      // Label exists, update its color and description
                      await github.rest.issues.updateLabel({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        name: label.name,
                        color: label.color,
                        description: label.description
                      });
                      console.log(`Updated label: ${label.name} with color: ${label.color}`);
                    } catch (error) {
                      // Label doesn't exist, create it
                      await github.rest.issues.createLabel({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        name: label.name,
                        color: label.color,
                        description: label.description
                      });
                      console.log(`Created label: ${label.name} with color: ${label.color}`);
                    }
                  } catch (updateError) {
                    console.error(`Error updating/creating label ${label.name}: ${updateError.message}`);
                  }
                }
                
                // Apply all labels to the issue
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: labels.map(l => l.name)
                });
                console.log(`Applied labels: ${labels.map(l => l.name).join(', ')}`);
              } catch (error) {
                console.error(`Error applying labels: ${error.message}`);
              }
            } else {
              console.log(`No valid labels found to apply. Primary label was: ${primaryLabel}`);
            }

      - name: Post analysis summary
        uses: actions/github-script@v6
        with:
          script: |
            // Get the analysis results from environment variables
            const issueType = process.env.ISSUE_TYPE || 'unknown';
            const priority = process.env.PRIORITY || 'not specified';
            const needsMoreInfo = process.env.NEEDS_MORE_INFO === 'true' ? 'Yes' : 'No';
            const labels = process.env.LABELS ? process.env.LABELS.split(',').join(', ') : 'none';
            const summary = process.env.SUMMARY || 'No summary provided.';
            const detailedAnalysis = process.env.DETAILED_ANALYSIS || '';
            const potentialSolution = process.env.POTENTIAL_SOLUTION || '';
            const relatedDocs = process.env.RELATED_DOCS || '';

            // Parse next steps arrays
            let nextStepsReporter = [];
            let nextStepsMaintainers = [];
            try {
              if (process.env.NEXT_STEPS_REPORTER) {
                nextStepsReporter = JSON.parse(process.env.NEXT_STEPS_REPORTER);
              }
              if (process.env.NEXT_STEPS_MAINTAINERS) {
                nextStepsMaintainers = JSON.parse(process.env.NEXT_STEPS_MAINTAINERS);
              }
            } catch (e) {
              console.log('Error parsing next steps:', e);
            }

            // Get additional fields from JSON file
            const fs = require('fs');
            let jsonContent = {};

            try {
              const fileContent = fs.readFileSync('json-content.txt', 'utf8');
              jsonContent = JSON.parse(fileContent);
            } catch (error) {
              console.error('Error reading or parsing JSON file:', error);
              // Continue with empty object if there's an error
            }
            const complexity = jsonContent.complexity || 'not specified';
            const estimatedEffort = jsonContent.estimatedEffort || 'not specified';
            const affectedComponents = jsonContent.affectedComponents ? jsonContent.affectedComponents.join(', ') : 'not specified';
            const potentialDuplicate = jsonContent.potentialDuplicateWarning === true ? 'Yes' : 'No';

            // Get primary label
            const primaryLabel = process.env.PRIMARY_LABEL || '';

            // Helper function to get emoji for issue type
            const getIssueTypeEmoji = (type) => {
              const typeLC = type.toLowerCase();
              if (typeLC.includes('bug')) return '🐛';
              if (typeLC.includes('feature')) return '✨';
              if (typeLC.includes('question')) return '❓';
              if (typeLC.includes('documentation')) return '📚';
              if (typeLC.includes('feedback')) return '💬';
              if (typeLC.includes('enhancement')) return '🚀';
              return '📋';
            };

            // Helper function to get emoji for priority
            const getPriorityEmoji = (priority) => {
              const priorityLC = priority.toLowerCase();
              if (priorityLC === 'critical') return '🔴';
              if (priorityLC === 'high') return '🟠';
              if (priorityLC === 'medium') return '🟡';
              if (priorityLC === 'low') return '🟢';
              return '⚪';
            };

            // Create a message with the new layout and design
            let summaryBody = `# 🧠 Virtual Assistant Summary\n\n`;

            // Improve the issue title based on the analysis
            const originalTitle = "${{ github.event.issue.title }}";
            let improvedTitle = originalTitle;

            // Use the AI-generated summary and analysis to create a better title
            if (summary && summary !== 'No summary provided.' && summary.length > 0) {
              // Extract key information from the summary
              let titleText = summary;
              
              // Aggressively remove phrases referring to users or requests to make titles direct and concise
              titleText = titleText
                // Remove any reference to "the user" or similar
                .replace(/^the user (is|has been|was) (requesting|asking for|reporting|describing|mentioning)/i, '')
                .replace(/^this (issue|bug|feature|request|report) (is about|describes|mentions|refers to|relates to)/i, '')
                .replace(/^(user|reporter|author) (wants|needs|requests|asks for|reports)/i, '')
                .replace(/^(please|kindly|urgently) (add|fix|implement|resolve|address)/i, '$2')
                // More aggressive patterns to remove user references
                .replace(/the user requests (a |an |to )?/i, '')
                .replace(/user wants (a |an |to )?/i, '')
                .replace(/request(s|ed|ing)? (for |to )?/i, '')
                .replace(/would like (a |an |to )?/i, '')
                .replace(/asking (for |to )?/i, '')
                .replace(/suggestion (for |to )?/i, '')
                .replace(/proposal (for |to )?/i, '')
                .replace(/need(s|ed|ing)? (a |an |to )?/i, '')
                // Remove any remaining "feature to" or similar phrases
                .replace(/^(feature|enhancement) (for |to )/i, '')
                .replace(/^(bug|issue) (with |in |when )/i, '')
                .trim();
              
              // Extract only the key part of the first sentence
              let firstSentence = titleText.split(/[.!?][\s\n]/)[0].trim();
              
              // Limit the first sentence to a maximum of 10 words for extreme brevity
              let words = firstSentence.split(/\s+/);
              let cleanTitle = words.slice(0, Math.min(10, words.length)).join(' ');
              
              // Capitalize first letter if it's not already
              cleanTitle = cleanTitle.charAt(0).toUpperCase() + cleanTitle.slice(1);
              
              // Remove trailing punctuation
              cleanTitle = cleanTitle.replace(/[.!?,;:]+$/, '');
              
              // Prefix with issue type for better categorization
              const typePrefix = issueType.toLowerCase().includes('bug') ? '[Bug]' :
                                 issueType.toLowerCase().includes('feature') ? '[Feature]' :
                                 '[Feedback]';
              
              // Further simplify the title - focus on the core action/request
              cleanTitle = cleanTitle
                // Remove any remaining articles at the beginning
                .replace(/^(a |an |the )/i, '')
                // Capitalize first word if it's a verb
                .replace(/^(add|implement|create|fix|update|change|improve|enable|disable|remove)/i,
                  match => match.charAt(0).toUpperCase() + match.slice(1))
                // Remove any adjectives that don't add critical meaning
                .replace(/\b(various|multiple|different|several|certain|specific|particular)\b\s+/gi, '')
                // Remove filler words
                .replace(/\b(in order to|with regards to|regarding|concerning|about|related to)\b\s+/gi, '')
                .trim();
              
              // Ensure the clean title is short enough (max 80 chars) before adding prefix
              const maxCleanTitleLength = 80;
              if (cleanTitle.length > maxCleanTitleLength) {
                cleanTitle = cleanTitle.substring(0, maxCleanTitleLength);
                // Make sure we don't cut off in the middle of a word
                if (cleanTitle.match(/\S$/)) {
                  cleanTitle = cleanTitle.replace(/\s\S*$/, '');
                }
              }
              
              // Create improved title with type prefix and clean title
              improvedTitle = `${typePrefix} ${cleanTitle}`;
              
              // Final check to ensure we're under the GitHub limit
              const maxTitleLength = 95; // Safely under GitHub's limit
              if (improvedTitle.length > maxTitleLength) {
                improvedTitle = improvedTitle.substring(0, maxTitleLength);
                // Make sure we don't cut off in the middle of a word
                if (improvedTitle.match(/\S$/)) {
                  improvedTitle = improvedTitle.replace(/\s\S*$/, '');
                }
              }
              
              // Update the issue title
              try {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  title: improvedTitle
                });
                console.log(`Updated issue title from "${originalTitle}" to "${improvedTitle}"`);
              } catch (error) {
                console.error(`Error updating issue title: ${error.message}`);
              }
            }

            // Add Issue Updated section
            summaryBody += `## 🔧 Issue Updated\n\n`;
            summaryBody += `**Title:** \`${improvedTitle}\`\n\n`;

            // Add Actions Taken section with icons
            summaryBody += `## ✅ Actions Taken\n\n`;

            // Issue Type with bug icon
            const issueTypeIcon = issueType.toLowerCase().includes('bug') ? '🐞' :
                                 issueType.toLowerCase().includes('feature') ? '✨' :
                                 '💬';
            summaryBody += `* ${issueTypeIcon} **Issue Type:** ${issueType}\n\n`;

            // Priority with lightning bolt icon
            const priorityIcon = '⚡';
            summaryBody += `* ${priorityIcon} **Priority:** ${priority}\n\n`;

            // Uniqueness with globe icon
            const uniquenessIcon = '🌐';
            if (potentialDuplicate === 'Yes') {
              summaryBody += `* ${uniquenessIcon} **Uniqueness:** Flagged as potential duplicate\n\n`;
            } else {
              summaryBody += `* ${uniquenessIcon} **Uniqueness:** Confirmed as unique\n\n`;
            }

            // Title Adjusted with pencil icon
            const titleIcon = '✏️';
            summaryBody += `* ${titleIcon} **Title Adjusted:** More descriptive for easier triage\n\n`;

            // Post the summary comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summaryBody
            });

            console.log('Posted enhanced analysis summary');

      - name: Assign issue to author
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              assignees: ['ugurkocde']
            });

            console.log('Assigned issue to ugurkocde');
