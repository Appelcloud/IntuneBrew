name: Collect App Information

on:
  workflow_dispatch: # Allow manual triggering

jobs:
  collect-app-info:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'

      - name: Make scrapers executable
        run: |
          chmod +x .github/scripts/scrapers/*.sh
          if [ $? -ne 0 ]; then
            echo "Failed to make scrapers executable"
            exit 1
          fi

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
        if: steps.pip-cache.outputs.cache-hit != 'true'

      - name: Collect app information
        id: collect-info
        run: |
          python .github/scripts/collect_app_info.py
          if [ $? -ne 0 ]; then
            echo "Failed to collect app information"
            exit 1
          fi

      - name: Create supported_apps.json
        id: create-json
        run: |
          python - <<EOF
          import json
          import os
          import sys
          
          try:
              apps_folder = "Apps"
              supported_apps = {}
              
              if not os.path.exists(apps_folder):
                  print(f"Error: {apps_folder} directory not found")
                  sys.exit(1)
              
              for filename in sorted(os.listdir(apps_folder)):
                  if filename.endswith(".json"):
                      app_name = os.path.splitext(filename)[0]
                      supported_apps[app_name] = f"https://raw.githubusercontent.com/ugurkocde/IntuneBrew/main/Apps/{filename}"
              
              with open("supported_apps.json", "w") as f:
                  json.dump(supported_apps, f, indent=4, sort_keys=True)
              
              print("Successfully created supported_apps.json")
              
          except Exception as e:
              print(f"Error creating supported_apps.json: {str(e)}")
              sys.exit(1)
          EOF

      - name: Check for changes
        id: check-changes
        run: |
          git status --porcelain | grep -q "."
          echo "has_changes=$?" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == '0'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Stage changes
          git add Apps/*.json supported_apps.json README.md
          
          # Get current timestamp in ISO format
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          # Create commit with timestamp
          git commit -m "Update app information and supported apps list
          
          Automated update at $TIMESTAMP"
          
          # Push changes with error handling
          if ! git push https://${{ secrets.PAT }}@github.com/${{ github.repository }}.git; then
            echo "Failed to push changes"
            exit 1
          fi
